/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package intellij.haskell.lang.haskell.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static intellij.haskell.lang.haskell.psi.HaskellTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_HaskellLexer.flex</tt>
 */
public class _HaskellLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\1\22\0\1\1\40\0\1\17\1\30\1\7\1\11\1\3\1\25\1\20\1\24\1\6\1\0\1\32"+
    "\1\5\1\21\1\2\1\23\1\16\1\27\1\13\1\22\1\14\1\10\1\15\1\4\1\31\1\26\5\0\1"+
    "\12\45\0\1\1\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\24\1\11\0\1\3\1\0\1\4"+
    "\10\0\1\5\7\0\1\6\5\0\1\7\15\0\1\10"+
    "\24\0\1\11\31\0\1\12\11\0\1\13\12\0\1\14"+
    "\1\15\3\0\1\16\1\17\13\0\1\20\13\0\1\21"+
    "\1\22\4\0\1\23\1\0\1\24\4\0\1\25\10\0"+
    "\1\26\11\0\1\27\2\0\1\30\3\0\1\31\15\0"+
    "\1\32\1\33\1\34\1\35\16\0\1\36\2\0\1\37"+
    "\6\0\1\40\3\0\1\41\1\42\13\0\1\43\2\0"+
    "\1\44\1\0\1\45\16\0\1\46\4\0\1\47\1\0"+
    "\1\50\5\0\1\51\4\0\1\52\32\0\1\53\3\0"+
    "\1\54\10\0\1\55\3\0\1\56\6\0\1\57\1\60"+
    "\1\0\1\61\1\62\1\63\5\0\1\64\10\0\1\65"+
    "\1\66\2\0\1\67\3\0\1\70\4\0\1\71\3\0"+
    "\1\72\1\73\1\74\2\0\1\75\3\0\1\76\3\0"+
    "\1\77\7\0\1\100\1\101\10\0\1\102\1\103\1\104"+
    "\10\0\1\105\1\106\1\107\16\0\1\110\1\111\3\0"+
    "\1\112\1\113\6\0\1\114\6\0\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[473];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\275"+
    "\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f\0\u017a\0\u0195"+
    "\0\u01b0\0\u01cb\0\u01e6\0\u0201\0\u021c\0\u0237\0\u0252\0\u026d"+
    "\0\u0288\0\u02a3\0\u02be\0\u02d9\0\u02f4\0\u030f\0\u032a\0\u0345"+
    "\0\u0360\0\u037b\0\33\0\u0396\0\u03b1\0\u03cc\0\u03e7\0\u0402"+
    "\0\u041d\0\u0438\0\u0453\0\u046e\0\u0489\0\u04a4\0\u04bf\0\u04da"+
    "\0\u04f5\0\u0510\0\u052b\0\33\0\u0546\0\u0561\0\u057c\0\u0597"+
    "\0\u05b2\0\33\0\u05cd\0\u05e8\0\u0603\0\u061e\0\u0639\0\u0654"+
    "\0\u066f\0\u068a\0\u06a5\0\u06c0\0\u06db\0\u06f6\0\u0711\0\33"+
    "\0\u072c\0\u0747\0\u0762\0\u077d\0\u0798\0\u07b3\0\u07ce\0\u07e9"+
    "\0\u0804\0\u081f\0\u083a\0\u0855\0\u0870\0\u088b\0\u08a6\0\u08c1"+
    "\0\u08dc\0\u08f7\0\u0912\0\u092d\0\33\0\u0948\0\u0963\0\u097e"+
    "\0\u0999\0\u09b4\0\u09cf\0\u09ea\0\u0a05\0\u0a20\0\u0a3b\0\u0a56"+
    "\0\u0a71\0\u0a8c\0\u0aa7\0\u0ac2\0\u0add\0\u0af8\0\u0b13\0\u0b2e"+
    "\0\u0b49\0\u0b64\0\u0b7f\0\u0b9a\0\u0bb5\0\u0bd0\0\33\0\u0beb"+
    "\0\u0c06\0\u0c21\0\u0c3c\0\u0c57\0\u0c72\0\u0c8d\0\u0ca8\0\u0cc3"+
    "\0\33\0\u0cde\0\u0cf9\0\u0d14\0\u0d2f\0\u0d4a\0\u0d65\0\u0d80"+
    "\0\u0d9b\0\u0db6\0\u0dd1\0\33\0\33\0\u0dec\0\u0e07\0\u0e22"+
    "\0\33\0\u0e3d\0\u0e58\0\u0e73\0\u0e8e\0\u0ea9\0\u0ec4\0\u0edf"+
    "\0\u0efa\0\u0f15\0\u0f30\0\u0f4b\0\u0f66\0\33\0\u0f81\0\u0f9c"+
    "\0\u0fb7\0\u0fd2\0\u0fed\0\u1008\0\u1023\0\u103e\0\u1059\0\u1074"+
    "\0\u108f\0\33\0\33\0\u10aa\0\u10c5\0\u10e0\0\u10fb\0\u1116"+
    "\0\u1131\0\33\0\u114c\0\u1167\0\u1182\0\u119d\0\33\0\u11b8"+
    "\0\u11d3\0\u11ee\0\u1209\0\u1224\0\u123f\0\u125a\0\u1275\0\33"+
    "\0\u1290\0\u12ab\0\u12c6\0\u12e1\0\u12fc\0\u1317\0\u1332\0\u134d"+
    "\0\u1368\0\33\0\u1383\0\u139e\0\33\0\u13b9\0\u13d4\0\u13ef"+
    "\0\33\0\u140a\0\u1425\0\u1440\0\u145b\0\u1476\0\u1491\0\u14ac"+
    "\0\u14c7\0\u14e2\0\u14fd\0\u1518\0\u1533\0\u154e\0\33\0\33"+
    "\0\33\0\33\0\u1569\0\u1584\0\u159f\0\u15ba\0\u15d5\0\u15f0"+
    "\0\u160b\0\u1626\0\u1641\0\u165c\0\u1677\0\u1692\0\u16ad\0\u16c8"+
    "\0\33\0\u16e3\0\u16fe\0\33\0\u1719\0\u1734\0\u174f\0\u176a"+
    "\0\u1785\0\u17a0\0\33\0\u17bb\0\u17d6\0\u17f1\0\33\0\33"+
    "\0\u180c\0\u1827\0\u1842\0\u185d\0\u1878\0\u1893\0\u18ae\0\u18c9"+
    "\0\u18e4\0\u18ff\0\u191a\0\33\0\u1935\0\u1950\0\33\0\u196b"+
    "\0\33\0\u1986\0\u19a1\0\u19bc\0\u19d7\0\u19f2\0\u1a0d\0\u1a28"+
    "\0\u1a43\0\u1a5e\0\u1a79\0\u1a94\0\u1aaf\0\u1aca\0\u1ae5\0\33"+
    "\0\u1b00\0\u1b1b\0\u1b36\0\u1b51\0\33\0\u1b6c\0\33\0\u1b87"+
    "\0\u1ba2\0\u1bbd\0\u1bd8\0\u1bf3\0\33\0\u1c0e\0\u1c29\0\u1c44"+
    "\0\u1c5f\0\33\0\u1c7a\0\u1c95\0\u1cb0\0\u1ccb\0\u1ce6\0\u1d01"+
    "\0\u1d1c\0\u1d37\0\u1d52\0\u1d6d\0\u1d88\0\u1da3\0\u1dbe\0\u1dd9"+
    "\0\u1df4\0\u1e0f\0\u1e2a\0\u1e45\0\u1e60\0\u1e7b\0\u1e96\0\u1eb1"+
    "\0\u1ecc\0\u1ee7\0\u1f02\0\u1f1d\0\33\0\u1f38\0\u1f53\0\u1f6e"+
    "\0\33\0\u1f89\0\u1fa4\0\u1fbf\0\u1fda\0\u1ff5\0\u2010\0\u202b"+
    "\0\u2046\0\33\0\u2061\0\u207c\0\u2097\0\33\0\u20b2\0\u20cd"+
    "\0\u20e8\0\u2103\0\u211e\0\u2139\0\33\0\33\0\u2154\0\33"+
    "\0\33\0\33\0\u216f\0\u218a\0\u21a5\0\u21c0\0\u21db\0\33"+
    "\0\u21f6\0\u2211\0\u222c\0\u2247\0\u2262\0\u227d\0\u2298\0\u22b3"+
    "\0\33\0\33\0\u22ce\0\u22e9\0\33\0\u2304\0\u231f\0\u233a"+
    "\0\33\0\u2355\0\u2370\0\u238b\0\u23a6\0\33\0\u23c1\0\u23dc"+
    "\0\u23f7\0\33\0\33\0\33\0\u2412\0\u242d\0\33\0\u2448"+
    "\0\u2463\0\u247e\0\33\0\u2499\0\u24b4\0\u24cf\0\33\0\u24ea"+
    "\0\u2505\0\u2520\0\u253b\0\u2556\0\u2571\0\u258c\0\33\0\33"+
    "\0\u25a7\0\u25c2\0\u25dd\0\u25f8\0\u2613\0\u262e\0\u2649\0\u2664"+
    "\0\33\0\33\0\33\0\u267f\0\u269a\0\u26b5\0\u26d0\0\u26eb"+
    "\0\u2706\0\u2721\0\u273c\0\33\0\33\0\33\0\u2757\0\u2772"+
    "\0\u278d\0\u27a8\0\u27c3\0\u27de\0\u27f9\0\u2814\0\u282f\0\u284a"+
    "\0\u2865\0\u2880\0\u289b\0\u28b6\0\33\0\33\0\u28d1\0\u28ec"+
    "\0\u2907\0\33\0\33\0\u2922\0\u293d\0\u2958\0\u2973\0\u298e"+
    "\0\u29a9\0\33\0\u29c4\0\u29df\0\u29fa\0\u2a15\0\u2a30\0\u2a4b"+
    "\0\33";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[473];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\1\14\1\15\1\16\1\17\1\20"+
    "\1\2\1\21\1\22\1\23\1\24\1\25\1\2\1\26"+
    "\1\27\2\2\34\0\1\3\34\0\1\30\3\0\1\31"+
    "\13\0\1\32\1\33\13\0\1\34\21\0\1\35\27\0"+
    "\1\36\11\0\1\37\2\0\1\40\26\0\1\41\16\0"+
    "\1\42\3\0\1\43\12\0\1\44\11\0\1\45\3\0"+
    "\1\46\1\47\10\0\1\50\33\0\1\51\2\0\1\52"+
    "\10\0\1\53\3\0\1\54\15\0\1\55\32\0\1\56"+
    "\15\0\1\57\1\0\1\60\7\0\1\61\13\0\1\62"+
    "\26\0\1\63\33\0\1\64\41\0\1\65\12\0\1\66"+
    "\10\0\1\67\20\0\1\70\4\0\1\71\15\0\1\72"+
    "\10\0\1\73\13\0\1\74\20\0\1\75\15\0\1\76"+
    "\17\0\1\77\41\0\1\100\17\0\1\101\51\0\1\102"+
    "\23\0\1\103\35\0\1\104\35\0\1\105\20\0\1\106"+
    "\25\0\1\107\43\0\1\110\10\0\1\111\27\0\1\112"+
    "\17\0\1\113\12\0\1\114\2\0\1\115\23\0\1\116"+
    "\33\0\1\117\35\0\1\120\12\0\1\121\2\0\1\122"+
    "\13\0\1\123\30\0\1\124\24\0\1\125\30\0\1\126"+
    "\3\0\1\127\11\0\1\130\20\0\1\131\33\0\1\132"+
    "\5\0\1\133\20\0\1\134\3\0\1\135\36\0\1\136"+
    "\17\0\1\137\30\0\1\140\45\0\1\141\27\0\1\142"+
    "\32\0\1\143\36\0\1\144\24\0\1\145\42\0\1\146"+
    "\24\0\1\147\22\0\1\150\43\0\1\151\47\0\1\152"+
    "\12\0\1\153\10\0\1\154\33\0\1\155\22\0\1\156"+
    "\36\0\1\157\3\0\1\160\16\0\1\161\30\0\1\162"+
    "\6\0\1\163\37\0\1\164\23\0\1\165\31\0\1\166"+
    "\24\0\1\167\46\0\1\170\26\0\1\171\33\0\1\172"+
    "\32\0\1\173\23\0\1\174\41\0\1\175\24\0\1\176"+
    "\47\0\1\177\31\0\1\200\13\0\1\201\41\0\1\202"+
    "\7\0\1\203\33\0\1\204\30\0\1\205\24\0\1\206"+
    "\22\0\1\207\35\0\1\210\32\0\1\211\43\0\1\212"+
    "\16\0\1\213\46\0\1\214\37\0\1\215\36\0\1\216"+
    "\26\0\1\217\17\0\1\220\23\0\1\221\33\0\1\222"+
    "\43\0\1\223\30\0\1\224\7\0\1\225\30\0\1\226"+
    "\22\0\1\227\30\0\1\230\32\0\1\231\36\0\1\232"+
    "\37\0\1\233\32\0\1\234\24\0\1\235\45\0\1\236"+
    "\25\0\1\237\16\0\1\240\13\0\1\241\35\0\1\242"+
    "\24\0\1\243\50\0\1\244\6\0\1\245\52\0\1\246"+
    "\25\0\1\247\25\0\1\250\27\0\1\251\26\0\1\252"+
    "\30\0\1\253\41\0\1\254\32\0\1\255\30\0\1\256"+
    "\41\0\1\257\44\0\1\260\14\0\1\261\41\0\1\262"+
    "\16\0\1\263\52\0\1\264\6\0\1\265\33\0\1\266"+
    "\13\0\1\267\32\0\1\270\26\0\1\271\40\0\1\272"+
    "\26\0\1\273\25\0\1\274\31\0\1\275\30\0\1\276"+
    "\41\0\1\277\21\0\1\300\41\0\1\301\26\0\1\302"+
    "\32\0\1\303\52\0\1\304\25\0\1\305\16\0\1\306"+
    "\34\0\1\307\25\0\1\310\46\0\1\311\21\0\1\312"+
    "\36\0\1\313\44\0\1\314\23\0\1\315\24\0\1\316"+
    "\31\0\1\317\33\0\1\320\27\0\1\321\51\0\1\322"+
    "\4\0\1\323\5\0\1\324\46\0\1\325\17\0\1\326"+
    "\32\0\1\327\52\0\1\330\25\0\1\331\1\332\10\0"+
    "\1\333\11\0\1\334\34\0\1\335\23\0\1\336\35\0"+
    "\1\337\5\0\1\340\33\0\1\341\27\0\1\342\42\0"+
    "\1\343\23\0\1\344\22\0\1\345\37\0\1\346\45\0"+
    "\1\347\27\0\1\350\21\0\1\351\31\0\1\352\41\0"+
    "\1\353\21\0\1\354\41\0\1\355\26\0\1\356\16\0"+
    "\1\357\14\0\1\360\34\0\1\361\42\0\1\362\30\0"+
    "\1\363\16\0\1\364\52\0\1\365\27\0\1\366\25\0"+
    "\1\367\22\0\1\370\36\0\1\371\43\0\1\372\17\0"+
    "\1\373\54\0\1\374\10\0\1\375\35\0\1\376\25\0"+
    "\1\377\32\0\1\u0100\31\0\1\u0101\43\0\1\u0102\26\0"+
    "\1\u0103\42\0\1\u0104\26\0\1\u0105\32\0\1\u0106\42\0"+
    "\1\u0107\12\0\1\u0108\36\0\1\u0109\35\0\1\u010a\27\0"+
    "\1\u010b\37\0\1\u010c\32\0\1\u010d\25\0\1\u010e\30\0"+
    "\1\u010f\27\0\1\u0110\44\0\1\u0111\24\0\1\u0112\36\0"+
    "\1\u0113\36\0\1\u0114\1\u0115\10\0\1\u0116\4\0\1\u0117"+
    "\47\0\1\u0118\32\0\1\u0119\25\0\1\u011a\32\0\1\u011b"+
    "\25\0\1\u011c\37\0\1\u011d\37\0\1\u011e\22\0\1\u011f"+
    "\55\0\1\u0120\2\0\1\u0121\40\0\1\u0122\41\0\1\u0123"+
    "\36\0\1\u0124\23\0\1\u0125\37\0\1\u0126\43\0\1\u0127"+
    "\13\0\1\u0128\32\0\1\u0129\36\0\1\u012a\34\0\1\u012b"+
    "\23\0\1\u012c\23\0\1\u012d\35\0\1\u012e\47\0\1\u012f"+
    "\12\0\1\u0130\52\0\1\u0131\27\0\1\u0132\27\0\1\u0133"+
    "\30\0\1\u0134\13\0\1\u0135\22\0\1\u0136\26\0\1\u0137"+
    "\32\0\1\u0138\41\0\1\u0139\31\0\1\u013a\16\0\1\u013b"+
    "\33\0\1\u013c\27\0\1\u013d\16\0\1\u013e\33\0\1\u013f"+
    "\14\0\1\u0140\45\0\1\u0141\20\0\1\u0142\36\0\1\u0143"+
    "\43\0\1\u0144\31\0\1\u0145\24\0\1\u0146\24\0\1\u0147"+
    "\27\0\1\u0148\52\0\1\u0149\16\0\1\u014a\41\0\1\u014b"+
    "\25\0\1\u014c\32\0\1\u014d\26\0\1\u014e\40\0\1\u014f"+
    "\32\0\1\u0150\22\0\1\u0151\35\0\1\u0152\34\0\1\u0153"+
    "\35\0\1\u0154\32\0\1\u0155\36\0\1\u0156\27\0\1\u0157"+
    "\24\0\1\u0158\36\0\1\u0159\31\0\1\u015a\23\0\1\u015b"+
    "\33\0\1\u015c\10\0\1\u015d\20\0\1\u015e\36\0\1\u015f"+
    "\45\0\1\u0160\32\0\1\u0161\14\0\1\u0162\2\0\1\u0163"+
    "\40\0\1\u0164\42\0\1\u0165\11\0\1\u0166\31\0\1\u0167"+
    "\32\0\1\u0168\34\0\1\u0169\31\0\1\u016a\26\0\1\u016b"+
    "\13\0\1\u016c\25\0\1\u016d\47\0\1\u016e\21\0\1\u016f"+
    "\23\0\1\u0170\47\0\1\u0171\35\0\1\u0172\12\0\1\u0173"+
    "\52\0\1\u0174\16\0\1\u0175\42\0\1\u0176\20\0\1\u0177"+
    "\55\0\1\u0178\13\0\1\u0179\37\0\1\u017a\33\0\1\u017b"+
    "\27\0\1\u017c\35\0\1\u017d\32\0\1\u017e\44\0\1\u017f"+
    "\22\0\1\u0180\14\0\1\u0181\46\0\1\u0182\16\0\1\u0183"+
    "\32\0\1\u0184\42\0\1\u0185\21\0\1\u0186\35\0\1\u0187"+
    "\51\0\1\u0188\22\0\1\u0189\20\0\1\u018a\34\0\1\u018b"+
    "\31\0\1\u018c\26\0\1\u018d\2\0\1\u018e\56\0\1\u018f"+
    "\23\0\1\u0190\26\0\1\u0191\22\0\1\u0192\34\0\1\u0193"+
    "\43\0\1\u0194\32\0\1\u0195\30\0\1\u0196\32\0\1\u0197"+
    "\42\0\1\u0198\11\0\1\u0199\35\0\1\u019a\40\0\1\u019b"+
    "\21\0\1\u019c\32\0\1\u019d\36\0\1\u019e\36\0\1\u019f"+
    "\33\0\1\u01a0\31\0\1\u01a1\42\0\1\u01a2\32\0\1\u01a3"+
    "\12\0\1\u01a4\32\0\1\u01a5\36\0\1\u01a6\37\0\1\u01a7"+
    "\30\0\1\u01a8\42\0\1\u01a9\24\0\1\u01aa\21\0\1\u01ab"+
    "\46\0\1\u01ac\26\0\1\u01ad\32\0\1\u01ae\30\0\1\u01af"+
    "\23\0\1\u01b0\44\0\1\u01b1\21\0\1\u01b2\46\0\1\u01b3"+
    "\20\0\1\u01b4\41\0\1\u01b5\32\0\1\u01b6\30\0\1\u01b7"+
    "\42\0\1\u01b8\16\0\1\u01b9\37\0\1\u01ba\32\0\1\u01bb"+
    "\26\0\1\u01bc\17\0\1\u01bd\11\0\1\u01be\41\0\1\u01bf"+
    "\34\0\1\u01c0\26\0\1\u01c1\42\0\1\u01c2\36\0\1\u01c3"+
    "\26\0\1\u01c4\12\0\1\u01c5\34\0\1\u01c6\50\0\1\u01c7"+
    "\30\0\1\u01c8\23\0\1\u01c9\22\0\1\u01ca\34\0\1\u01cb"+
    "\47\0\1\u01cc\14\0\1\u01cd\32\0\1\u01ce\60\0\1\u01cf"+
    "\3\0\1\u01d0\46\0\1\u01d1\30\0\1\u01d2\31\0\1\u01d3"+
    "\22\0\1\u01d4\51\0\1\u01d5\32\0\1\u01d6\16\0\1\u01d7"+
    "\47\0\1\u01d8\11\0\1\u01d9\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10854];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\11\0\1\1\1\0\1\11\10\0"+
    "\1\1\7\0\1\11\5\0\1\11\15\0\1\11\24\0"+
    "\1\11\31\0\1\11\11\0\1\11\12\0\2\11\3\0"+
    "\1\11\1\1\13\0\1\11\13\0\2\11\4\0\1\1"+
    "\1\0\1\11\4\0\1\11\10\0\1\11\11\0\1\11"+
    "\2\0\1\11\3\0\1\11\15\0\4\11\16\0\1\11"+
    "\2\0\1\11\6\0\1\11\3\0\2\11\13\0\1\11"+
    "\2\0\1\11\1\0\1\11\16\0\1\11\4\0\1\11"+
    "\1\0\1\11\5\0\1\11\4\0\1\11\32\0\1\11"+
    "\3\0\1\11\10\0\1\11\3\0\1\11\6\0\2\11"+
    "\1\0\3\11\5\0\1\11\10\0\2\11\2\0\1\11"+
    "\3\0\1\11\4\0\1\11\3\0\3\11\2\0\1\11"+
    "\3\0\1\11\3\0\1\11\7\0\2\11\10\0\3\11"+
    "\10\0\3\11\16\0\2\11\3\0\2\11\6\0\1\11"+
    "\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[473];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _HaskellLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 78: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 79: break;
          case 3: 
            { return HS_IN;
            } 
            // fall through
          case 80: break;
          case 4: 
            { return HS_IF;
            } 
            // fall through
          case 81: break;
          case 5: 
            { return HS_DO;
            } 
            // fall through
          case 82: break;
          case 6: 
            { return HS_AT;
            } 
            // fall through
          case 83: break;
          case 7: 
            { return HS_OF;
            } 
            // fall through
          case 84: break;
          case 8: 
            { return HS_LET;
            } 
            // fall through
          case 85: break;
          case 9: 
            { return HS_DOT;
            } 
            // fall through
          case 86: break;
          case 10: 
            { return HS_ELSE;
            } 
            // fall through
          case 87: break;
          case 11: 
            { return HS_CASE;
            } 
            // fall through
          case 88: break;
          case 12: 
            { return HS_DATA;
            } 
            // fall through
          case 89: break;
          case 13: 
            { return HS_DASH;
            } 
            // fall through
          case 90: break;
          case 14: 
            { return HS_THEN;
            } 
            // fall through
          case 91: break;
          case 15: 
            { return HS_TYPE;
            } 
            // fall through
          case 92: break;
          case 16: 
            { return HS_HASH;
            } 
            // fall through
          case 93: break;
          case 17: 
            { return HS_EQUAL;
            } 
            // fall through
          case 94: break;
          case 18: 
            { return HS_WHERE;
            } 
            // fall through
          case 95: break;
          case 19: 
            { return HS_INFIX;
            } 
            // fall through
          case 96: break;
          case 20: 
            { return HS_CLASS;
            } 
            // fall through
          case 97: break;
          case 21: 
            { return HS_COMMA;
            } 
            // fall through
          case 98: break;
          case 22: 
            { return HS_TILDE;
            } 
            // fall through
          case 99: break;
          case 23: 
            { return HS_OCTAL;
            } 
            // fall through
          case 100: break;
          case 24: 
            { return HS_FLOAT;
            } 
            // fall through
          case 101: break;
          case 25: 
            { return HS_QUOTE;
            } 
            // fall through
          case 102: break;
          case 26: 
            { return HS_INFIXL;
            } 
            // fall through
          case 103: break;
          case 27: 
            { return HS_INFIXR;
            } 
            // fall through
          case 104: break;
          case 28: 
            { return HS_IMPORT;
            } 
            // fall through
          case 105: break;
          case 29: 
            { return HS_CON_ID;
            } 
            // fall through
          case 106: break;
          case 30: 
            { return HS_VAR_ID;
            } 
            // fall through
          case 107: break;
          case 31: 
            { return HS_MODULE;
            } 
            // fall through
          case 108: break;
          case 32: 
            { return HS_FORALL;
            } 
            // fall through
          case 109: break;
          case 33: 
            { return HS_NEWLINE;
            } 
            // fall through
          case 110: break;
          case 34: 
            { return HS_NEWTYPE;
            } 
            // fall through
          case 111: break;
          case 35: 
            { return HS_COMMENT;
            } 
            // fall through
          case 112: break;
          case 36: 
            { return HS_DECIMAL;
            } 
            // fall through
          case 113: break;
          case 37: 
            { return HS_DEFAULT;
            } 
            // fall through
          case 114: break;
          case 38: 
            { return HS_HADDOCK;
            } 
            // fall through
          case 115: break;
          case 39: 
            { return HS_NCOMMENT;
            } 
            // fall through
          case 116: break;
          case 40: 
            { return HS_NHADDOCK;
            } 
            // fall through
          case 117: break;
          case 41: 
            { return HS_INSTANCE;
            } 
            // fall through
          case 118: break;
          case 42: 
            { return HS_DERIVING;
            } 
            // fall through
          case 119: break;
          case 43: 
            { return HS_CONSYM_ID;
            } 
            // fall through
          case 120: break;
          case 44: 
            { return HS_DIRECTIVE;
            } 
            // fall through
          case 121: break;
          case 45: 
            { return HS_VARSYM_ID;
            } 
            // fall through
          case 122: break;
          case 46: 
            { return HS_SEMICOLON;
            } 
            // fall through
          case 123: break;
          case 47: 
            { return HS_BACKSLASH;
            } 
            // fall through
          case 124: break;
          case 48: 
            { return HS_BACKQUOTE;
            } 
            // fall through
          case 125: break;
          case 49: 
            { return HS_LEFT_PAREN;
            } 
            // fall through
          case 126: break;
          case 50: 
            { return HS_LEFT_ARROW;
            } 
            // fall through
          case 127: break;
          case 51: 
            { return HS_LEFT_BRACE;
            } 
            // fall through
          case 128: break;
          case 52: 
            { return HS_UNDERSCORE;
            } 
            // fall through
          case 129: break;
          case 53: 
            { return HS_PRAGMA_END;
            } 
            // fall through
          case 130: break;
          case 54: 
            { return HS_PRAGMA_SEP;
            } 
            // fall through
          case 131: break;
          case 55: 
            { return HS_ONE_PRAGMA;
            } 
            // fall through
          case 132: break;
          case 56: 
            { return HS_QUASIQUOTE;
            } 
            // fall through
          case 133: break;
          case 57: 
            { return HS_COLON_COLON;
            } 
            // fall through
          case 134: break;
          case 58: 
            { return HS_RIGHT_PAREN;
            } 
            // fall through
          case 135: break;
          case 59: 
            { return HS_RIGHT_ARROW;
            } 
            // fall through
          case 136: break;
          case 60: 
            { return HS_RIGHT_BRACE;
            } 
            // fall through
          case 137: break;
          case 61: 
            { return HS_TYPE_FAMILY;
            } 
            // fall through
          case 138: break;
          case 62: 
            { return HS_HEXADECIMAL;
            } 
            // fall through
          case 139: break;
          case 63: 
            { return HS_LEFT_BRACKET;
            } 
            // fall through
          case 140: break;
          case 64: 
            { return HS_VERTICAL_BAR;
            } 
            // fall through
          case 141: break;
          case 65: 
            { return HS_PRAGMA_START;
            } 
            // fall through
          case 142: break;
          case 66: 
            { return HS_DOUBLE_QUOTES;
            } 
            // fall through
          case 143: break;
          case 67: 
            { return HS_RIGHT_BRACKET;
            } 
            // fall through
          case 144: break;
          case 68: 
            { return HS_TYPE_INSTANCE;
            } 
            // fall through
          case 145: break;
          case 69: 
            { return HS_STRING_LITERAL;
            } 
            // fall through
          case 146: break;
          case 70: 
            { return HS_FOREIGN_EXPORT;
            } 
            // fall through
          case 147: break;
          case 71: 
            { return HS_FOREIGN_IMPORT;
            } 
            // fall through
          case 148: break;
          case 72: 
            { return HS_INCLUDE_DIRECTIVE;
            } 
            // fall through
          case 149: break;
          case 73: 
            { return HS_CHARACTER_LITERAL;
            } 
            // fall through
          case 150: break;
          case 74: 
            { return HS_LIST_COMPREHENSION;
            } 
            // fall through
          case 151: break;
          case 75: 
            { return HS_DOUBLE_RIGHT_ARROW;
            } 
            // fall through
          case 152: break;
          case 76: 
            { return HS_NOT_TERMINATED_COMMENT;
            } 
            // fall through
          case 153: break;
          case 77: 
            { return HS_NOT_TERMINATED_QQ_EXPRESSION;
            } 
            // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
