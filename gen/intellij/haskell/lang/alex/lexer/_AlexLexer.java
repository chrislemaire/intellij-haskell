/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package intellij.haskell.lang.alex.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static intellij.haskell.lang.alex.psi.AlexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_AlexLexer.flex</tt>
 */
public class _AlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\1\22\0\1\1\40\0\1\12\1\30\1\31\1\21\1\2\1\22\1\6\1\16\1\20\1\0\1\14"+
    "\1\4\1\23\1\15\1\3\1\11\1\24\1\5\1\17\1\13\1\25\1\0\1\27\1\7\1\26\5\0\1\10"+
    "\45\0\1\1\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\11\1\16\0\1\3\35\0\1\4"+
    "\25\0\1\5\34\0\1\6\5\0\1\7\6\0\1\10"+
    "\23\0\1\11\45\0\1\12\23\0\1\13\16\0\1\14"+
    "\14\0\1\15\4\0\1\16\14\0\1\17\4\0\1\20"+
    "\4\0\1\21\1\0\1\22\5\0\1\23\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\32\0\64\0\116\0\150\0\202\0\234\0\266"+
    "\0\320\0\352\0\u0104\0\u011e\0\u0138\0\u0152\0\u016c\0\u0186"+
    "\0\u01a0\0\u01ba\0\u01d4\0\u01ee\0\u0208\0\u0222\0\u023c\0\u0256"+
    "\0\u0270\0\u028a\0\32\0\u02a4\0\u02be\0\u02d8\0\u02f2\0\u030c"+
    "\0\u0326\0\u0340\0\u035a\0\u0374\0\u038e\0\u03a8\0\u03c2\0\u03dc"+
    "\0\u03f6\0\u0410\0\u042a\0\u0444\0\u045e\0\u0478\0\u0492\0\u04ac"+
    "\0\u04c6\0\u04e0\0\u04fa\0\u0514\0\u052e\0\u0548\0\u0562\0\u057c"+
    "\0\32\0\u0596\0\u05b0\0\u05ca\0\u05e4\0\u05fe\0\u0618\0\u0632"+
    "\0\u064c\0\u0666\0\u0680\0\u069a\0\u06b4\0\u06ce\0\u06e8\0\u0702"+
    "\0\u071c\0\u0736\0\u0750\0\u076a\0\u0784\0\u079e\0\32\0\u07b8"+
    "\0\u07d2\0\u07ec\0\u0806\0\u0820\0\u083a\0\u0854\0\u086e\0\u0888"+
    "\0\u08a2\0\u08bc\0\u08d6\0\u08f0\0\u090a\0\u0924\0\u093e\0\u0958"+
    "\0\u0972\0\u098c\0\u09a6\0\u09c0\0\u09da\0\u09f4\0\u0a0e\0\u0a28"+
    "\0\u0a42\0\u0a5c\0\u0a76\0\32\0\u0a90\0\u0aaa\0\u0ac4\0\u0ade"+
    "\0\u0af8\0\32\0\u0b12\0\u0b2c\0\u0b46\0\u0b60\0\u0b7a\0\u0b94"+
    "\0\32\0\u0bae\0\u0bc8\0\u0be2\0\u0bfc\0\u0c16\0\u0c30\0\u0c4a"+
    "\0\u0c64\0\u0c7e\0\u0c98\0\u0cb2\0\u0ccc\0\u0ce6\0\u0d00\0\u0d1a"+
    "\0\u0d34\0\u0d4e\0\u0d68\0\u0d82\0\32\0\u0d9c\0\u0db6\0\u0dd0"+
    "\0\u0dea\0\u0e04\0\u0e1e\0\u0e38\0\u0e52\0\u0e6c\0\u0e86\0\u0ea0"+
    "\0\u0eba\0\u0ed4\0\u0eee\0\u0f08\0\u0f22\0\u0f3c\0\u0f56\0\u0f70"+
    "\0\u0f8a\0\u0fa4\0\u0fbe\0\u0fd8\0\u0ff2\0\u100c\0\u1026\0\u1040"+
    "\0\u105a\0\u1074\0\u108e\0\u10a8\0\u10c2\0\u10dc\0\u10f6\0\u1110"+
    "\0\u112a\0\u1144\0\32\0\u115e\0\u1178\0\u1192\0\u11ac\0\u11c6"+
    "\0\u11e0\0\u11fa\0\u1214\0\u122e\0\u1248\0\u1262\0\u127c\0\u1296"+
    "\0\u12b0\0\u12ca\0\u12e4\0\u12fe\0\u1318\0\u1332\0\32\0\u134c"+
    "\0\u1366\0\u1380\0\u139a\0\u13b4\0\u13ce\0\u13e8\0\u1402\0\u141c"+
    "\0\u1436\0\u1450\0\u146a\0\u1484\0\u149e\0\32\0\u14b8\0\u14d2"+
    "\0\u14ec\0\u1506\0\u1520\0\u153a\0\u1554\0\u156e\0\u1588\0\u15a2"+
    "\0\u15bc\0\u15d6\0\32\0\u15f0\0\u160a\0\u1624\0\u163e\0\32"+
    "\0\u1658\0\u1672\0\u168c\0\u16a6\0\u16c0\0\u16da\0\u16f4\0\u170e"+
    "\0\u1728\0\u1742\0\u175c\0\u1776\0\32\0\u1790\0\u17aa\0\u17c4"+
    "\0\u17de\0\32\0\u17f8\0\u1812\0\u182c\0\u1846\0\32\0\u1860"+
    "\0\32\0\u187a\0\u1894\0\u18ae\0\u18c8\0\u18e2\0\32\0\32";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\3\2\1\7"+
    "\1\10\3\2\1\11\1\12\1\2\1\13\5\2\1\14"+
    "\2\2\33\0\1\3\33\0\1\15\17\0\1\16\1\17"+
    "\7\0\1\20\31\0\1\21\15\0\1\22\36\0\1\23"+
    "\14\0\1\24\33\0\1\25\21\0\1\26\1\27\7\0"+
    "\1\30\21\0\1\31\33\0\1\32\30\0\1\33\37\0"+
    "\1\34\44\0\1\35\26\0\1\36\15\0\1\37\31\0"+
    "\1\40\53\0\1\41\20\0\1\42\31\0\1\43\35\0"+
    "\1\44\31\0\1\45\13\0\1\46\4\0\1\47\23\0"+
    "\1\50\37\0\1\51\37\0\1\52\23\0\1\53\32\0"+
    "\1\54\20\0\1\55\45\0\1\56\17\0\1\57\53\0"+
    "\1\60\17\0\1\61\35\0\1\62\13\0\1\63\47\0"+
    "\1\64\24\0\1\65\22\0\1\66\36\0\1\67\24\0"+
    "\1\70\31\0\1\71\35\0\1\72\30\0\1\73\35\0"+
    "\1\74\36\0\1\75\34\0\1\76\10\0\1\77\60\0"+
    "\1\100\13\0\1\101\33\0\1\102\16\0\1\103\41\0"+
    "\1\104\30\0\1\105\30\0\1\106\25\0\1\107\35\0"+
    "\1\110\31\0\1\111\52\0\1\112\30\0\1\113\5\0"+
    "\1\114\30\0\1\115\44\0\1\116\21\0\1\117\45\0"+
    "\1\120\14\0\1\121\26\0\1\122\41\0\1\123\37\0"+
    "\1\124\22\0\1\125\24\0\1\126\35\0\1\127\24\0"+
    "\1\130\32\0\1\131\31\0\1\132\45\0\1\133\36\0"+
    "\1\134\14\0\1\135\26\0\1\136\41\0\1\137\33\0"+
    "\1\140\24\0\1\141\37\0\1\142\16\0\1\143\30\0"+
    "\1\144\35\0\1\145\24\0\1\146\43\0\1\147\20\0"+
    "\1\150\37\0\1\151\27\0\1\152\42\0\1\153\21\0"+
    "\1\154\25\0\1\155\43\0\1\156\14\0\1\157\37\0"+
    "\1\160\41\0\1\161\26\0\1\162\22\0\1\163\33\0"+
    "\1\164\36\0\1\165\27\0\1\166\26\0\1\167\34\0"+
    "\1\170\27\0\1\171\26\0\1\172\45\0\1\173\30\0"+
    "\1\174\20\0\1\175\34\0\1\176\37\0\1\177\36\0"+
    "\1\200\23\0\1\201\21\0\1\202\23\0\1\203\32\0"+
    "\1\204\30\0\1\205\45\0\1\206\1\0\1\207\14\0"+
    "\1\210\36\0\1\211\32\0\1\212\41\0\1\213\23\0"+
    "\1\214\25\0\1\215\26\0\1\216\42\0\1\217\26\0"+
    "\1\220\36\0\1\221\26\0\1\222\35\0\1\223\13\0"+
    "\1\224\31\0\1\225\32\0\1\226\32\0\1\227\40\0"+
    "\1\230\35\0\1\231\22\0\1\232\23\0\1\233\50\0"+
    "\1\234\20\0\1\235\36\0\1\236\30\0\1\237\20\0"+
    "\1\240\46\0\1\241\21\0\1\242\27\0\1\243\7\0"+
    "\1\244\30\0\1\245\16\0\1\246\47\0\1\247\24\0"+
    "\1\250\20\0\1\251\56\0\1\252\24\0\1\253\21\0"+
    "\1\254\22\0\1\255\40\0\1\256\36\0\1\257\27\0"+
    "\1\260\33\0\1\261\32\0\1\262\26\0\1\263\16\0"+
    "\1\264\47\0\1\265\15\0\1\266\42\0\1\267\25\0"+
    "\1\270\30\0\1\271\34\0\1\272\26\0\1\273\43\0"+
    "\1\274\30\0\1\275\12\0\1\276\34\0\1\277\41\0"+
    "\1\300\25\0\1\301\25\0\1\302\44\0\1\303\17\0"+
    "\1\304\43\0\1\305\21\0\1\306\26\0\1\307\26\0"+
    "\1\310\41\0\1\311\21\0\1\312\54\0\1\313\26\0"+
    "\1\314\12\0\1\315\30\0\1\316\57\0\1\317\13\0"+
    "\1\320\27\0\1\321\36\0\1\322\20\0\1\323\45\0"+
    "\1\324\26\0\1\325\21\0\1\326\52\0\1\327\24\0"+
    "\1\330\26\0\1\331\33\0\1\332\13\0\1\333\31\0"+
    "\1\334\44\0\1\335\24\0\1\336\47\0\1\337\15\0"+
    "\1\340\34\0\1\341\24\0\1\342\26\0\1\343\36\0"+
    "\1\344\32\0\1\345\26\0\1\346\32\0\1\347\26\0"+
    "\1\350\25\0\1\351\14\0\1\352\22\0\1\353\24\0"+
    "\1\354\44\0\1\355\24\0\1\356\35\0\1\357\27\0"+
    "\1\360\46\0\1\361\15\0\1\362\27\0\1\363\21\0"+
    "\1\364\50\0\1\365\22\0\1\366\21\0\1\367\31\0"+
    "\1\370\40\0\1\371\35\0\1\372\21\0\1\373\34\0"+
    "\1\374\36\0\1\375\25\0\1\376\33\0\1\377\34\0"+
    "\1\u0100\32\0\1\u0101\14\0\1\u0102\31\0\1\u0103\44\0"+
    "\1\u0104\21\0\1\u0105\26\0\1\u0106\31\0\1\u0107\50\0"+
    "\1\u0108\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6396];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\16\0\1\11\35\0\1\11\25\0"+
    "\1\11\34\0\1\11\5\0\1\11\6\0\1\11\23\0"+
    "\1\11\45\0\1\11\23\0\1\11\16\0\1\11\14\0"+
    "\1\11\4\0\1\11\14\0\1\11\4\0\1\11\4\0"+
    "\1\11\1\0\1\11\5\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _AlexLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 21: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 22: break;
          case 3: 
            { return ALEX_EOL;
            } 
            // fall through
          case 23: break;
          case 4: 
            { return ALEX_EQUAL;
            } 
            // fall through
          case 24: break;
          case 5: 
            { return ALEX_STRING;
            } 
            // fall through
          case 25: break;
          case 6: 
            { return ALEX_LEFT_LISP;
            } 
            // fall through
          case 26: break;
          case 7: 
            { return ALEX_SEMICOLON;
            } 
            // fall through
          case 27: break;
          case 8: 
            { return ALEX_RIGHT_LISP;
            } 
            // fall through
          case 28: break;
          case 9: 
            { return ALEX_PUBLIC_REGEX;
            } 
            // fall through
          case 29: break;
          case 10: 
            { return ALEX_REGEX_PART_TOKEN;
            } 
            // fall through
          case 30: break;
          case 11: 
            { return ALEX_HASKELL_IDENTIFIER;
            } 
            // fall through
          case 31: break;
          case 12: 
            { return ALEX_EMAIL_AND_IDENTIFIER;
            } 
            // fall through
          case 32: break;
          case 13: 
            { return ALEX_DOLLAR_AND_IDENTIFIER;
            } 
            // fall through
          case 33: break;
          case 14: 
            { return ALEX_SOMETHING_IS_HAPPENING;
            } 
            // fall through
          case 34: break;
          case 15: 
            { return ALEX_STATEFUL_TOKENS_RULE_END;
            } 
            // fall through
          case 35: break;
          case 16: 
            { return ALEX_SOMETHING_IS_GONNA_HAPPEN;
            } 
            // fall through
          case 36: break;
          case 17: 
            { return ALEX_STATEFUL_TOKENS_RULE_START;
            } 
            // fall through
          case 37: break;
          case 18: 
            { return ALEX_A_SYMBOL_FOLLOWED_BY_TOKENS;
            } 
            // fall through
          case 38: break;
          case 19: 
            { return ALEX_WRAPPER_TYPE_IS_GONNA_BE_HERE;
            } 
            // fall through
          case 39: break;
          case 20: 
            { return ALEX_SOMETHING_HAS_ALREADY_HAPPENED;
            } 
            // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
